# docker-compose.yml

networks:
  bmcp_network:
    driver: bridge

volumes:
  neo4j_data: # Note: Not currently used as we connect externally
  shared_code_input:
  shared_cpg_output:
  postgres_data: {} # Define named volume for PostgreSQL data

services:
  # Neo4j service block removed to use external Neo4j Desktop instance

  joern_analysis_service:
    build:
      context: .
      dockerfile: ./joern_analysis_service/Dockerfile
    networks:
      - bmcp_network
    volumes:
      - shared_code_input:/analysis-data/code:ro
      - shared_cpg_output:/analysis-data/cpg
      - ./test_fixtures:/app/test_fixtures:ro
    ports:
      - "50053:50053"
    environment:
      GRPC_PORT: 50053
      _JAVA_OPTS: ${JOERN_JAVA_OPTS:--Xmx4g}
    # depends_on removed as code_fetcher_service is deleted

  treesitter_sql_analyzer:
    build:
      context: .
      dockerfile: ./treesitter_sql_analyzer/Dockerfile
    networks:
      - bmcp_network
    volumes:
      - shared_code_input:/shared_data/code_input:ro
      - ./test_fixtures:/app/test_fixtures:ro
    ports:
      - "50054:50054"
    environment:
      GRPC_PORT: 50054
      POSTGRES_HOST: postgres_db
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres} # Use default 'postgres' if not set
      POSTGRES_DB: ${DB_NAME:-bmcp_db}
      POSTGRES_PORT: 5432
    depends_on:
      postgres_db:
        condition: service_started

  python_analyzer_service:
    build:
      context: .
      dockerfile: ./python_analyzer_service/Dockerfile
    networks:
      - bmcp_network
    volumes:
      - shared_code_input:/shared_data/code_input:ro
      - ./test_fixtures:/app/test_fixtures:ro
    ports:
      - "50056:50056"
    environment:
      GRPC_PORT: 50056
      PYTHONPATH: /app:/app/generated/src
      POSTGRES_HOST: postgres_db
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-bmcp_db}
      POSTGRES_PORT: 5432 # Default PostgreSQL port
    # depends_on removed as code_fetcher_service is deleted
    depends_on:
      postgres_db:
        condition: service_started

  javascript_analyzer_service:
    build:
      context: .
      dockerfile: ./javascript_analyzer_service/Dockerfile
    networks:
      - bmcp_network
    volumes:
      - shared_code_input:/shared_data/code_input:ro
      - ./test_fixtures:/app/test_fixtures:ro
    ports:
      - "50057:50057"
    environment:
      GRPC_PORT: 50057
      POSTGRES_HOST: postgres_db
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres} # Use default 'postgres' if not set
      POSTGRES_DB: ${DB_NAME:-bmcp_db}
      POSTGRES_PORT: 5432
    depends_on:
      postgres_db:
        condition: service_started

  typescript_analyzer_service:
    build:
      context: .
      dockerfile: ./typescript_analyzer_service/Dockerfile
    networks:
      - bmcp_network
    volumes:
      - shared_code_input:/shared_data/code_input:ro
      - ./test_fixtures:/app/test_fixtures:ro
    ports:
      - "50058:50058"
    environment:
      GRPC_PORT: 50058
      POSTGRES_HOST: postgres_db
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres} # Use default 'postgres' if not set
      POSTGRES_DB: ${DB_NAME:-bmcp_db}
      POSTGRES_PORT: 5432
    depends_on:
      postgres_db:
        condition: service_started

  neo4j_ingestion_service:
    build:
      context: .
      dockerfile: ./neo4j_ingestion_service/Dockerfile
    networks:
      - bmcp_network
    volumes:
      - shared_cpg_output:/shared_data/cpg_output:ro
    ports:
      - "50055:50055"
    env_file:
      - .env
    environment: # Ensure this block exists and is correctly indented
      GRPC_PORT: 50055
      SHARED_CPG_PATH: /shared_data/cpg_output
      NEO4J_URI: bolt://host.docker.internal:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j} # Allow override from .env
      # SECURITY: Using environment variable with no default value
      # This ensures passwords aren't hardcoded in source code
      NEO4J_PASSWORD: ${NEO4J_PASSWORD} # Must be set in .env file
      PYTHONPATH: /app:/app/generated/src # Add generated path
      # Add PostgreSQL connection details
      POSTGRES_HOST: postgres_db
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-bmcp_db}
      NEO4J_DATABASE: ${NEO4J_DATABASE:-neo4j} # Add database name from .env
    depends_on: # Correct indentation
      postgres_db:
        condition: service_started
      joern_analysis_service: # Wait for Joern service to start (simple dependency)
        condition: service_started # Joern doesn't have a healthcheck yet

  api_gateway:
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    networks:
      - bmcp_network
    ports:
      - "8043:8043" # Changed host and container port
    volumes:
      - ./test_fixtures:/app/test_fixtures:ro
    environment:
      HTTP_PORT: 8043 # Changed container port
      # CODE_FETCHER_SERVICE_ADDRESS removed as service is deleted
      JOERN_ANALYSIS_SERVICE_ADDRESS: joern_analysis_service:50053
      NEO4J_INGESTION_SERVICE_ADDRESS: neo4j_ingestion_service:50055
      SQL_ANALYSIS_SERVICE_ADDRESS: treesitter_sql_analyzer:50054
      PYTHON_ANALYZER_ADDRESS: python_analyzer_service:50056
      JAVASCRIPT_ANALYZER_ADDRESS: javascript_analyzer_service:50057
      TYPESCRIPT_ANALYZER_ADDRESS: typescript_analyzer_service:50058
      NEO4J_URI: bolt://host.docker.internal:7687
      NEO4J_USER: ${NEO4J_USER:-neo4j} # Allow override from .env
      # SECURITY: Using environment variable with no default value
      # This ensures passwords aren't hardcoded in source code
      NEO4J_PASSWORD: ${NEO4J_PASSWORD} # Must be set in .env file
      PROJECT_BASE_PATH: /app
      PYTHONPATH: /app
    depends_on:
      # code_fetcher_service dependency removed
      joern_analysis_service:
        condition: service_started
      neo4j_ingestion_service:
        condition: service_started # Changed from service_healthy
      treesitter_sql_analyzer:
        condition: service_started
      python_analyzer_service:
        condition: service_started # Changed from service_healthy
      javascript_analyzer_service:
        condition: service_started
      typescript_analyzer_service:
        condition: service_started
      postgres_db: # Add dependency on postgres
        condition: service_started
  postgres_db:
    image: postgres:latest
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${DB_USER:-postgres} # Default to 'postgres' if not set in .env
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres} # Default to 'postgres' if not set in .env
      POSTGRES_DB: ${DB_NAME:-bmcp_db} # Default to 'bmcp_db' if not set in .env
      PGDATA: /var/lib/postgresql/data/pgdata # Recommended for performance
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
      - ./postgres_init:/docker-entrypoint-initdb.d # Mount local init scripts for schema creation
    ports:
      - "5432:5432"
    networks:
      - bmcp_network
    healthcheck:
      disable: true

    restart: unless-stopped

  python_app_service: # New service for the Python backend app
    build:
      context: .
      dockerfile: ./python_app_service/Dockerfile
    networks:
      - bmcp_network
    ports:
      - "50052:50052" # Changed host and container port
    environment:
      # Pass database credentials from .env file
      DB_HOST: postgres_db
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-bmcp_db}
      PYTHONPATH: /app
      # Add any other necessary environment variables for the app (e.g., APP_PORT=8001)
      APP_PORT: 50052 # Changed container port
    depends_on:
      postgres_db:
        condition: service_started # Changed from service_healthy
    restart: unless-stopped
