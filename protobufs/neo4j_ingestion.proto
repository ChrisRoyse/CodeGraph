syntax = "proto3";

package neo4j_ingestion;

// Represents a node identified during analysis, before final resolution.
message AnalysisNode {
  string unique_id = 1;       // Unique identifier generated by the analyzer (e.g., temporary ID).
  string name = 2;            // Name of the node (e.g., function name, class name).
  string file_path = 3;       // Path of the file where the node is defined.
  int32 start_line = 4;       // Starting line number.
  int32 end_line = 5;         // Ending line number.
  string language = 6;        // Programming language.
  repeated string labels = 7; // Initial labels assigned by the analyzer (e.g., "FunctionDefinition", "Variable").
}

// Represents a potential relationship identified during analysis.
// The target might be an identifier that needs resolution later.
message RelationshipStub {
  string source_id = 1;         // unique_id of the source AnalysisNode.
  string target_identifier = 2; // Identifier of the target (e.g., variable name, function call name, import path). Needs resolution.
  string type = 3;              // Type of the relationship (e.g., "CALLS", "REFERENCES", "IMPORTS").
  map<string, string> properties = 4; // Optional properties for the relationship.
}

// Payload containing nodes and relationship stubs from an analysis run.
message AnalysisDataPayload {
  repeated AnalysisNode nodes = 1;
  repeated RelationshipStub relationships = 2;
}

// Request message for the IngestAnalysisData RPC.
message IngestAnalysisDataRequest {
  AnalysisDataPayload payload = 1;
}

// Response message for the IngestAnalysisData RPC.
message IngestAnalysisDataResponse {
  bool success = 1;
  string message = 2; // Optional message (e.g., number of items ingested or error details).
}

// Request message for the TriggerResolution RPC.
message TriggerResolutionRequest {
  // Optional: Add parameters later if needed, e.g., specific types to resolve, batch ID.
}

// Response message for the TriggerResolution RPC.
message TriggerResolutionResponse {
  bool success = 1;
  string message = 2; // Optional message (e.g., "Resolution started" or error details).
}

// Service definition for the Neo4j Ingestion Service.
service Neo4jIngestionService {
  // Accepts raw analysis data (nodes and relationship stubs) for initial storage.
  rpc IngestAnalysisData(IngestAnalysisDataRequest) returns (IngestAnalysisDataResponse);

  // Triggers the process to resolve relationship stubs and finalize graph connections.
  rpc TriggerResolution(TriggerResolutionRequest) returns (TriggerResolutionResponse);
}