#!/usr/bin/env python3
"""
Script to compile Protocol Buffer definitions into Python code.
Uses grpcio-tools to generate _pb2.py and _pb2_grpc.py files.
"""

import os
import sys
import glob
import subprocess
from pathlib import Path

# Root directory of the project
PROJECT_ROOT = Path(__file__).parent.parent.parent.absolute()

# Proto files directory
PROTO_DIR = PROJECT_ROOT / "shared" / "proto"

# Output directories for Python services
OUTPUT_DIRS = {
    "id_service": PROJECT_ROOT / "services" / "id_service" / "generated",
    "ingestion_worker": PROJECT_ROOT / "services" / "ingestion_worker" / "generated",
    "python_analyzer": PROJECT_ROOT / "services" / "analyzers" / "python_analyzer" / "generated",
    # Add more Python service directories as needed
}


def ensure_output_dirs():
    """Ensure all output directories exist."""
    for output_dir in OUTPUT_DIRS.values():
        os.makedirs(output_dir, exist_ok=True)
        # Create __init__.py to make the directory a package
        init_file = output_dir / "__init__.py"
        if not init_file.exists():
            with open(init_file, "w") as f:
                f.write("# Generated by compile_python.py\n")


def compile_proto_files():
    """Compile all .proto files to Python code."""
    proto_files = glob.glob(str(PROTO_DIR / "*.proto"))
    
    if not proto_files:
        print(f"No .proto files found in {PROTO_DIR}")
        return False
    
    print(f"Found {len(proto_files)} .proto files to compile")
    
    # Compile each proto file for each service
    for service_name, output_dir in OUTPUT_DIRS.items():
        print(f"\nCompiling proto files for {service_name}...")
        
        # Create a python_out directory with the correct package structure
        python_out = output_dir
        
        for proto_file in proto_files:
            proto_filename = os.path.basename(proto_file)
            print(f"  Compiling {proto_filename}...")
            
            # Use python -m grpc_tools.protoc to compile the proto file
            cmd = [
                sys.executable,
                "-m",
                "grpc_tools.protoc",
                f"--proto_path={PROTO_DIR}",
                f"--python_out={python_out}",
                f"--grpc_python_out={python_out}",
                proto_file
            ]
            
            try:
                subprocess.run(cmd, check=True)
                print(f"  Successfully compiled {proto_filename}")
            except subprocess.CalledProcessError as e:
                print(f"  Error compiling {proto_filename}: {e}")
                return False
    
    return True


def main():
    """Main function to compile proto files."""
    print("Starting Python Protocol Buffer compilation...")
    
    # Ensure output directories exist
    ensure_output_dirs()
    
    # Compile proto files
    success = compile_proto_files()
    
    if success:
        print("\nSuccessfully compiled all proto files to Python")
    else:
        print("\nFailed to compile some proto files")
        sys.exit(1)


if __name__ == "__main__":
    main()