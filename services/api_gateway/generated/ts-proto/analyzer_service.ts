// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: analyzer_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bmcp.analyzer_service";

/** AnalyzeRequest contains information about the file to analyze */
export interface AnalyzeRequest {
  /** Path to the file to analyze, relative to the monitored root */
  filePath: string;
  /** Content of the file to analyze */
  content: string;
  /** Language of the file (python, javascript, typescript, etc.) */
  language: string;
}

/** AnalyzeResponse contains the analysis results */
export interface AnalyzeResponse {
  /** Whether the analysis was successful */
  success: boolean;
  /** Error message if analysis failed */
  errorMessage: string;
  /** Serialized AnalyzerResultPayload containing nodes and relationships */
  resultPayload: string;
}

function createBaseAnalyzeRequest(): AnalyzeRequest {
  return { filePath: "", content: "", language: "" };
}

export const AnalyzeRequest: MessageFns<AnalyzeRequest> = {
  encode(message: AnalyzeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filePath !== "") {
      writer.uint32(10).string(message.filePath);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    if (message.language !== "") {
      writer.uint32(26).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalyzeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalyzeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filePath = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.language = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalyzeRequest {
    return {
      filePath: isSet(object.filePath) ? globalThis.String(object.filePath) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      language: isSet(object.language) ? globalThis.String(object.language) : "",
    };
  },

  toJSON(message: AnalyzeRequest): unknown {
    const obj: any = {};
    if (message.filePath !== "") {
      obj.filePath = message.filePath;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AnalyzeRequest>, I>>(base?: I): AnalyzeRequest {
    return AnalyzeRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AnalyzeRequest>, I>>(object: I): AnalyzeRequest {
    const message = createBaseAnalyzeRequest();
    message.filePath = object.filePath ?? "";
    message.content = object.content ?? "";
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseAnalyzeResponse(): AnalyzeResponse {
  return { success: false, errorMessage: "", resultPayload: "" };
}

export const AnalyzeResponse: MessageFns<AnalyzeResponse> = {
  encode(message: AnalyzeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== "") {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.resultPayload !== "") {
      writer.uint32(26).string(message.resultPayload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AnalyzeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAnalyzeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resultPayload = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AnalyzeResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      resultPayload: isSet(object.resultPayload) ? globalThis.String(object.resultPayload) : "",
    };
  },

  toJSON(message: AnalyzeResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.resultPayload !== "") {
      obj.resultPayload = message.resultPayload;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AnalyzeResponse>, I>>(base?: I): AnalyzeResponse {
    return AnalyzeResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AnalyzeResponse>, I>>(object: I): AnalyzeResponse {
    const message = createBaseAnalyzeResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? "";
    message.resultPayload = object.resultPayload ?? "";
    return message;
  },
};

/** AnalyzerService provides language-specific code analysis */
export interface AnalyzerService {
  /** Analyze performs analysis on a file and returns the results */
  Analyze(request: AnalyzeRequest): Promise<AnalyzeResponse>;
}

export const AnalyzerServiceServiceName = "bmcp.analyzer_service.AnalyzerService";
export class AnalyzerServiceClientImpl implements AnalyzerService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || AnalyzerServiceServiceName;
    this.rpc = rpc;
    this.Analyze = this.Analyze.bind(this);
  }
  Analyze(request: AnalyzeRequest): Promise<AnalyzeResponse> {
    const data = AnalyzeRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Analyze", data);
    return promise.then((data) => AnalyzeResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
