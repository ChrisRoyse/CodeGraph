// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.19.1
// source: ingestion_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bmcp.ingestion_service";

/** IngestResultsRequest contains analysis results to ingest */
export interface IngestResultsRequest {
  /** Serialized AnalyzerResultPayload containing nodes and relationships */
  resultPayload: string;
}

/** IngestResultsResponse contains the result of the ingestion operation */
export interface IngestResultsResponse {
  /** Whether the ingestion was successful */
  success: boolean;
  /** Error message if ingestion failed */
  errorMessage: string;
  /** Number of nodes ingested */
  nodesIngested: number;
  /** Number of relationships ingested */
  relationshipsIngested: number;
  /** Number of pending relationships created */
  pendingRelationshipsCreated: number;
}

/** ResolvePendingRelationshipsRequest triggers resolution of pending relationships */
export interface ResolvePendingRelationshipsRequest {
  /** Maximum number of pending relationships to resolve (optional) */
  maxCount: number;
}

/** ResolvePendingRelationshipsResponse contains the result of the resolution operation */
export interface ResolvePendingRelationshipsResponse {
  /** Whether the resolution was successful */
  success: boolean;
  /** Error message if resolution failed */
  errorMessage: string;
  /** Number of relationships resolved */
  relationshipsResolved: number;
  /** Number of pending relationships remaining */
  pendingRelationshipsRemaining: number;
}

function createBaseIngestResultsRequest(): IngestResultsRequest {
  return { resultPayload: "" };
}

export const IngestResultsRequest: MessageFns<IngestResultsRequest> = {
  encode(message: IngestResultsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.resultPayload !== "") {
      writer.uint32(10).string(message.resultPayload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestResultsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestResultsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.resultPayload = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestResultsRequest {
    return { resultPayload: isSet(object.resultPayload) ? globalThis.String(object.resultPayload) : "" };
  },

  toJSON(message: IngestResultsRequest): unknown {
    const obj: any = {};
    if (message.resultPayload !== "") {
      obj.resultPayload = message.resultPayload;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IngestResultsRequest>, I>>(base?: I): IngestResultsRequest {
    return IngestResultsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IngestResultsRequest>, I>>(object: I): IngestResultsRequest {
    const message = createBaseIngestResultsRequest();
    message.resultPayload = object.resultPayload ?? "";
    return message;
  },
};

function createBaseIngestResultsResponse(): IngestResultsResponse {
  return {
    success: false,
    errorMessage: "",
    nodesIngested: 0,
    relationshipsIngested: 0,
    pendingRelationshipsCreated: 0,
  };
}

export const IngestResultsResponse: MessageFns<IngestResultsResponse> = {
  encode(message: IngestResultsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== "") {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.nodesIngested !== 0) {
      writer.uint32(24).int32(message.nodesIngested);
    }
    if (message.relationshipsIngested !== 0) {
      writer.uint32(32).int32(message.relationshipsIngested);
    }
    if (message.pendingRelationshipsCreated !== 0) {
      writer.uint32(40).int32(message.pendingRelationshipsCreated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestResultsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestResultsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.nodesIngested = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.relationshipsIngested = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pendingRelationshipsCreated = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestResultsResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      nodesIngested: isSet(object.nodesIngested) ? globalThis.Number(object.nodesIngested) : 0,
      relationshipsIngested: isSet(object.relationshipsIngested) ? globalThis.Number(object.relationshipsIngested) : 0,
      pendingRelationshipsCreated: isSet(object.pendingRelationshipsCreated)
        ? globalThis.Number(object.pendingRelationshipsCreated)
        : 0,
    };
  },

  toJSON(message: IngestResultsResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.nodesIngested !== 0) {
      obj.nodesIngested = Math.round(message.nodesIngested);
    }
    if (message.relationshipsIngested !== 0) {
      obj.relationshipsIngested = Math.round(message.relationshipsIngested);
    }
    if (message.pendingRelationshipsCreated !== 0) {
      obj.pendingRelationshipsCreated = Math.round(message.pendingRelationshipsCreated);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IngestResultsResponse>, I>>(base?: I): IngestResultsResponse {
    return IngestResultsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IngestResultsResponse>, I>>(object: I): IngestResultsResponse {
    const message = createBaseIngestResultsResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? "";
    message.nodesIngested = object.nodesIngested ?? 0;
    message.relationshipsIngested = object.relationshipsIngested ?? 0;
    message.pendingRelationshipsCreated = object.pendingRelationshipsCreated ?? 0;
    return message;
  },
};

function createBaseResolvePendingRelationshipsRequest(): ResolvePendingRelationshipsRequest {
  return { maxCount: 0 };
}

export const ResolvePendingRelationshipsRequest: MessageFns<ResolvePendingRelationshipsRequest> = {
  encode(message: ResolvePendingRelationshipsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.maxCount !== 0) {
      writer.uint32(8).int32(message.maxCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolvePendingRelationshipsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolvePendingRelationshipsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.maxCount = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolvePendingRelationshipsRequest {
    return { maxCount: isSet(object.maxCount) ? globalThis.Number(object.maxCount) : 0 };
  },

  toJSON(message: ResolvePendingRelationshipsRequest): unknown {
    const obj: any = {};
    if (message.maxCount !== 0) {
      obj.maxCount = Math.round(message.maxCount);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResolvePendingRelationshipsRequest>, I>>(
    base?: I,
  ): ResolvePendingRelationshipsRequest {
    return ResolvePendingRelationshipsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResolvePendingRelationshipsRequest>, I>>(
    object: I,
  ): ResolvePendingRelationshipsRequest {
    const message = createBaseResolvePendingRelationshipsRequest();
    message.maxCount = object.maxCount ?? 0;
    return message;
  },
};

function createBaseResolvePendingRelationshipsResponse(): ResolvePendingRelationshipsResponse {
  return { success: false, errorMessage: "", relationshipsResolved: 0, pendingRelationshipsRemaining: 0 };
}

export const ResolvePendingRelationshipsResponse: MessageFns<ResolvePendingRelationshipsResponse> = {
  encode(message: ResolvePendingRelationshipsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.errorMessage !== "") {
      writer.uint32(18).string(message.errorMessage);
    }
    if (message.relationshipsResolved !== 0) {
      writer.uint32(24).int32(message.relationshipsResolved);
    }
    if (message.pendingRelationshipsRemaining !== 0) {
      writer.uint32(32).int32(message.pendingRelationshipsRemaining);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResolvePendingRelationshipsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResolvePendingRelationshipsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.relationshipsResolved = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.pendingRelationshipsRemaining = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResolvePendingRelationshipsResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
      relationshipsResolved: isSet(object.relationshipsResolved) ? globalThis.Number(object.relationshipsResolved) : 0,
      pendingRelationshipsRemaining: isSet(object.pendingRelationshipsRemaining)
        ? globalThis.Number(object.pendingRelationshipsRemaining)
        : 0,
    };
  },

  toJSON(message: ResolvePendingRelationshipsResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    if (message.relationshipsResolved !== 0) {
      obj.relationshipsResolved = Math.round(message.relationshipsResolved);
    }
    if (message.pendingRelationshipsRemaining !== 0) {
      obj.pendingRelationshipsRemaining = Math.round(message.pendingRelationshipsRemaining);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResolvePendingRelationshipsResponse>, I>>(
    base?: I,
  ): ResolvePendingRelationshipsResponse {
    return ResolvePendingRelationshipsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResolvePendingRelationshipsResponse>, I>>(
    object: I,
  ): ResolvePendingRelationshipsResponse {
    const message = createBaseResolvePendingRelationshipsResponse();
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? "";
    message.relationshipsResolved = object.relationshipsResolved ?? 0;
    message.pendingRelationshipsRemaining = object.pendingRelationshipsRemaining ?? 0;
    return message;
  },
};

/** IngestionService handles ingestion of analysis results into the Neo4j database */
export interface IngestionService {
  /** IngestResults ingests analysis results into the Neo4j database */
  IngestResults(request: IngestResultsRequest): Promise<IngestResultsResponse>;
  /** ResolvePendingRelationships resolves pending relationships in the Neo4j database */
  ResolvePendingRelationships(
    request: ResolvePendingRelationshipsRequest,
  ): Promise<ResolvePendingRelationshipsResponse>;
}

export const IngestionServiceServiceName = "bmcp.ingestion_service.IngestionService";
export class IngestionServiceClientImpl implements IngestionService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || IngestionServiceServiceName;
    this.rpc = rpc;
    this.IngestResults = this.IngestResults.bind(this);
    this.ResolvePendingRelationships = this.ResolvePendingRelationships.bind(this);
  }
  IngestResults(request: IngestResultsRequest): Promise<IngestResultsResponse> {
    const data = IngestResultsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "IngestResults", data);
    return promise.then((data) => IngestResultsResponse.decode(new BinaryReader(data)));
  }

  ResolvePendingRelationships(
    request: ResolvePendingRelationshipsRequest,
  ): Promise<ResolvePendingRelationshipsResponse> {
    const data = ResolvePendingRelationshipsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ResolvePendingRelationships", data);
    return promise.then((data) => ResolvePendingRelationshipsResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
